---
import { Icon } from 'astro-icon';
import getLinks from './helpers/getLinks';
import getBreadcrumbsSchema from './helpers/getBreadcrumbsSchema';

export interface Props {
  breadcrumbs: {
    tailTitle: string;
    items?: string[] | string;
  };
}

const { tailTitle } = (Astro.props as Props).breadcrumbs;
if (!tailTitle) {
  throw new Error('tailTitle required!');
}

let { items } = (Astro.props as Props).breadcrumbs;
if (typeof items === 'string') {
  items = items
    .split(',')
    .filter(Boolean)
    .map((s: string) => s.trim());
}

const pathname = Astro.request.url.pathname;
const links = await getLinks(pathname, tailTitle, items || []);
const schema = getBreadcrumbsSchema(links);
---

<nav aria-label="Breadcrumb" class="mb-0 flex overflow-hidden text-ellipsis whitespace-nowrap align-middle text-sm text-current">
  <script type="application/ld+json" set:html={JSON.stringify(schema)}></script>
  <a class="breadcrumb-link" href={links[0]!.to}>
    <Icon name="home" class="h-4 w-4" />
  </a>
  {links?.slice(1, -1).map(({ to, title }: Link) => (
    <a key={to} class="breadcrumb-link" href={to}>
      {title}
    </a>
  ))}
  <span>{tailTitle}</span>
</nav>

<style>
  .breadcrumb-link {
    @apply inline-flex items-center text-current after:mx-2 after:block after:h-2 after:w-2 after:rotate-45 after:border-t-2 after:border-r-2 after:border-solid after:border-current after:opacity-80 after:content-empty;
  }
</style>
