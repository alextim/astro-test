---
import utils from '@alextim/utils';

import i18n from '@/config/i18n';
import translate from '@/lib/translate';
import { fetchContacts, fetchAddress, fetchTranslations } from '@/lib/api';
import { getLocaleFromPathname } from '@/lib/pathname-utils';
import { getPage } from '@/lib/cms';

import Layout from '@/components/Layout.astro';
import Section from '@/components/Section.astro';
import OrganizationOpeningHours from '@/components/organization/OrganizationOpeningHours.astro';

const locale = Astro.request.params.locale || i18n.defaultLocale;
const [page] = Astro.fetchContent('../../content/pages/contacts/contacts.??.md')
  .filter((p) => getLocaleFromPathname(p.file.pathname) === locale)
  .map(getPage);
const { title, headline, metaTitle, metaDescription, noindex, nofollow } = page as Page;


const translations = fetchTranslations(locale);
const t: ITranslationFunc = function (key: string, params?: Record<string, string>): string {
  return translate(key, translations, params);
};

const seo = {
  title: metaTitle,
  description: metaDescription,
  noindex,
  nofollow,
};

const contacts = fetchContacts();
const address = fetchAddress(locale);

const { openingHours, embedMap } = contacts;

const {
  legalName,
  postalAddress: { addressCountryName, addressLocality, postalCode, streetAddress },
  contactPoint,
} = address;


const styleItemsWrap = 'grid gap-3 xl:gap-0';
---

<Layout {seo}>
  <h1>{title}</h1>
  <div>{headline}</div>

  <Section>
    <div class="grid gap-8 xl:grid-cols-3">
      <div>
        <div class="mb-2">
          <div class="mb-2 font-bold">{legalName}</div>
          <div class="mb-2">
            <div>{streetAddress}</div>
            <div>
              {addressLocality} {postalCode}
            </div>
            <div>{addressCountryName}</div>
          </div>
        </div>

        <div class="mb-2 font-bold">{t('contacts.opening_time')}</div>
        {openingHours && <OrganizationOpeningHours {openingHours} {t} />}
      </div>

      {contactPoint?.map(({ description, name, contactTypeName, emails, phones }) => (
        <div class="flex flex-col mb-4 xl:pr-4 xl:last-of-type:pr-0">
          <div class="mb-2 font-bold">{description}</div>
          <div>{name}</div>
          <div class="mb-2">{contactTypeName}</div>
          <div class={styleItemsWrap}>
            {phones?.map((tel) => (
              <a href={utils.phoneUrl(tel)}>
                {utils.formatPhone(tel)}
              </a>
            ))}
            {emails?.map(utils.obfuscate).map((em: string) => (
              <a href={`mailto:${em}`}>{em}</a>
            ))}
          </div>
        </div>
      ))}
    </div>
  </Section>

  <Section>
    <iframe
      title="Google Maps"
      src={embedMap}
      width="100%"
      height="450"
      frameBorder="0"
      allowFullScreen=""
      aria-hidden="false"
      loading="lazy"
    />
  </Section>
</Layout>
