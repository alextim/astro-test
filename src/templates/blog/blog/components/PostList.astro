---
import i18n from '@/config/i18n';
import { localizePath } from '@/lib/i18n-utils';
import config from '@/config/website';
import { fetchTranslations } from '@/lib/api';
import { getLocaleFromPathname } from '@/lib/pathname-utils';
import translate from '@/lib/translate';

import Layout from '@/components/Layout/Layout.astro';

import PostCard from './PostCard.astro';
import PostPagination from './PostPagination.astro';

// import { CategoryWidget, TagsWidget, YearsWidget } from '@/components/post-widgets';

export interface Props {
  title?: string;
  readMoreKey?: string;
  page: {
    data: Array<Post>;
    currentPage: number;
    total: number;
    url: {
      prev?: string;
      next?: string;
      current: string;
    };
  };
  indexPage: Page;
}

const {
  title,
  readMoreKey,
  page: { data: posts, currentPage, total, url },
  indexPage: { html, title: defaultTitle, metaTitle, headline, metaDescription, noindex, nofollow, to },
} = Astro.props;

const locale = Astro.request.params.locale || i18n.defaultLocale;
const siteUrl = Astro.site.href; //Astro.site.origin - without trailing slash

const translations = fetchTranslations(locale);
const t: ITranslationFunc = function (key: string, params?: Record<string, string>): string {
  return translate(key, translations, params);
};

const readMore = t(readMoreKey || config.readMore);

const isFirst = currentPage === 1;

const link = [];

if (total > 1) {
  if (url.prev) {
    link.push({ rel: 'prev', href: `${siteUrl}${url.prev}` });
  }
  if (url.next) {
    link.push({ rel: 'next', href: `${siteUrl}${url.next}` });
  }
}

const [home] = Astro.fetchContent('../../content/pages/home/home.??.md')
  .filter((p) => getLocaleFromPathname(p.file.pathname) === locale)
const breadcrumbs = [
  { to: localizePath('/', locale), title: home.title },
  { to, title: title || defaultTitle },
];

const seo = {
  title: metaTitle,
  description: metaDescription,
  headline,
  noindex,
  nofollow,

  pageType: 'Blog',
  link,
  breadcrumbs,
};
---

<Layout {seo} title={title || defaultTitle} {headline} {breadcrumbs}>
  {isFirst && html ? <div class="mt-6 mb-10">{html}</div> : null}

  <div class="grid gap-7 lg:grid-cols-2 xl:grid-cols-3">
    {posts.map((post: Post) => <PostCard post={post} {readMore} />)}
  </div>
  <PostPagination {currentPage} {total} {url} />
</Layout>
