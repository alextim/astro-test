---
import { localizePath } from '@/lib/i18n-utils';
import { getPage } from '@/lib/cms';
import translate from '@/lib/translate';
import { fetchTranslations } from '@/lib/api';
import { getLocaleFromPathname } from '@/lib/pathname-utils';

import Layout from '@/components/Layout/Layout.astro';

import InnerAsideLayout from '@/components/InnerAsideLayout.astro';
// import AsideServices from '../../service/components/AsideServices.astro';
import AsideFeaturedPosts from './components/AsideFeaturedPosts.astro';
import AsideRecentPosts from './components/AsideRecentPosts.astro';
import PostInfo from './components/PostInfo.astro';
import LastUpdated from './components/LastUpdated.astro';

export interface Props {
  post: Post;
}

const {
  locale,

  title,
  metaTitle,
  headline,
  metaDescription,
  cover,
  noindex,
  nofollow,
  datePublished,
  dateModified,
  readingTime,
  html,
  authors,

  to,
} = Astro.props.post;

/* <AsideServices mainNav={mainNav} /> */
const translations = fetchTranslations(locale);
const t: ITranslationFunc = function (key: string, params?: Record<string, string>): string {
  return translate(key, translations, params);
};

const [indexPage] = Astro.fetchContent('../../../../content/blog/pages/blog/blog.??.md')
  .filter((p) => getLocaleFromPathname(p.file.pathname) === locale)
  .map(getPage);

const [home] = Astro.fetchContent('../../../../content/pages/home/home.??.md')
  .filter((p) => getLocaleFromPathname(p.file.pathname) === locale)

const breadcrumbs = [
  { to: localizePath('/', locale), title: home.title },
  { to: indexPage?.to, title: indexPage?.title },
  { to, title },
];

const seo = {
  title: metaTitle,
  description: metaDescription,
  headline,
  datePublished,
  dateModified,
  authors,

  noindex,
  nofollow,

  pageType: 'BlogPosting',
  cover, // TODO:

  breadcrumbs,
};
---

<Layout {seo} {title} {headline} {breadcrumbs}>
  <PostInfo {authors} {datePublished} {readingTime} {t} />
  <InnerAsideLayout {cover} {html}>
    <aside slot="aside" class="flex flex-col">
      <AsideRecentPosts t={t} />
      <AsideFeaturedPosts t={t} />
    </aside>
  </InnerAsideLayout>
  {dateModified && ((datePublished && dateModified !== datePublished) || !datePublished) ? <LastUpdated {dateModified} {t} /> : null}
</Layout>
