---
import readingTime from 'reading-time';

import translate from '../../../lib/translate';
import { fetchTranslations, fetchAuthors } from '../../../lib/api';
import Layout from '../../../components/Layout.astro';
import InnerAsideLayout from '../../../components/InnerAsideLayout.astro';
// import AsideServices from '../../service/components/AsideServices.astro';
import AsideFeaturedPosts from './components/AsideFeaturedPosts.astro';
import AsideRecentPosts from './components/AsideRecentPosts.astro';
import PostInfo from './components/PostInfo.astro';
import LastUpdated from './components/LastUpdated.astro';


const getTimeToRead = (source) => {
  const stats = readingTime(source);
  if (!stats.minutes) {
    return 0;
  }
  return stats.minutes > 1 ?  Math.ceil(stats.minutes) : 1;
};

const {
  locale,
  pathname,

  title,
  metaTitle,
  headline,
  metaDescription,
  cover,
  noindex,
  breadcrumbs,
  datePublished,
  dateModified,
  astro,
} = Astro.props.post;

let {
  author,
} = Astro.props.post;

let authors;
if (author && Array.isArray(author)) {
  const allAuthors = fetchAuthors(locale);
  authors = allAuthors.filter((el) => author.some((email) => email === el.email));
}

const { html } = astro;
const timeToRead = getTimeToRead(astro.source);
/*
recentPosts: allMdPost(sort: { fields: [datePublished], order: DESC }, limit: 10, filter: { locale: { eq: $locale } }) {
featuredPosts: allMdPost(
  sort: { fields: [datePublished], order: DESC }
  limit: 10
  filter: { featured: { eq: true }, locale: { eq: $locale } }
*/
// {cover && cover.sm ? <img src={Astro.resolve(cover.sm)} alt={cover.alt} /> :  null}

      /* <AsideServices mainNav={mainNav} /> */
const translations = fetchTranslations(locale);
const t = (key, params = undefined) => translate(key, translations, params);

---
<Layout
  title={title}
  headline={headline}
  breadcrumbs={breadcrumbs}
  seo={{
    locale,
    title: metaTitle || title,
    description: metaDescription || headline,
    headline,
    pathname,
    noindex,
    breadcrumbs,
    datePublished,
    dateModified,
    author,
    pageType: 'BlogPosting',
    imgPath: cover?.sm?.publicURL,
  }}
  >
  <PostInfo authors={authors} datePublished={datePublished} timeToRead={timeToRead} t={t} />
  <InnerAsideLayout
    cover={cover}
    html={html}>
    <aside slot="aside" class="flex flex-col">
      <AsideRecentPosts t={t} />
      <AsideFeaturedPosts t={t} />
    </aside>
  </InnerAsideLayout>
  {dateModified && ((datePublished && dateModified !== datePublished) || !datePublished) ? <LastUpdated date={dateModified} t={t} /> : null}
</Layout>
