---
import readingTime from 'reading-time';

import Layout from '../../../components/Layout.astro';
import InnerAsideLayout from '../../../components/InnerAsideLayout.astro';
import SEO from '../../../components/SEO.astro';
// import AsideServices from '../../service/components/AsideServices.astro';
// import AsideFeaturedPosts from './components/AsideFeaturedPosts.astro';
// import AsideRecentPosts from '@/components/AsideRecentPosts.astro';
import PostInfo from './components/PostInfo.astro';
import LastUpdated from './components/LastUpdated.astro';


const getTimeToRead = (source) => {
  const stats = readingTime(source);
  if (!stats.minutes) {
    return 0;
  }
  return stats.minutes > 1 ?  Math.ceil(stats.minutes) : 1;
};

const {
  locale,
  pathname,

  title,
  metaTitle,
  headline,
  metaDescription,
  cover,
  noindex,
  breadcrumbs,
  datePublished,
  dateModified,
  author,
  astro,
} = Astro.props.post;

const { html } = astro;
const timeToRead = getTimeToRead(astro.source);
/*
recentPosts: allMdPost(sort: { fields: [datePublished], order: DESC }, limit: 10, filter: { locale: { eq: $locale } }) {
featuredPosts: allMdPost(
  sort: { fields: [datePublished], order: DESC }
  limit: 10
  filter: { featured: { eq: true }, locale: { eq: $locale } }
*/
// {cover && cover.sm && <img src={Astro.resolve(cover.sm)} alt={cover.alt} />}
const t = (s) => s;

      /* <AsideServices mainNav={mainNav} /> */
      /* <AsideFeaturedPosts items={data.featuredPosts.edges} /> */
      /* <AsideRecentPosts items={data.recentPosts.edges} /> */

---
<Layout
  title={title}
  headline={headline}
  breadcrumbs={breadcrumbs}
>
  <SEO
    locale={locale}
    title={metaTitle}
    description={metaDescription}
    headline={headline}
    pathname={pathname}
    noindex={noindex}
    breadcrumbs={breadcrumbs}
    datePublished={datePublished}
    dateModified={dateModified}
    author={author}
    pageType="BlogPosting"
    imgPath={cover?.sm?.publicURL}
  />
  <PostInfo author={author} datePublished={datePublished} timeToRead={timeToRead} t={t} />
  <InnerAsideLayout
    cover={cover}
    html={html}>
    <aside slot="aside" class="flex flex-col">
      test aside
    </aside>
  </InnerAsideLayout>
  {dateModified && ((datePublished && dateModified !== datePublished) || !datePublished) && <LastUpdated date={dateModified} t={t} />}
</Layout>
