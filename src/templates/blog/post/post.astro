---
import translate from '@/lib/translate';
import { fetchTranslations } from '@/lib/api';
import Layout from '@/components/Layout.astro';
import InnerAsideLayout from '@/components/InnerAsideLayout.astro';
// import AsideServices from '../../service/components/AsideServices.astro';
import AsideFeaturedPosts from './components/AsideFeaturedPosts.astro';
import AsideRecentPosts from './components/AsideRecentPosts.astro';
import PostInfo from './components/PostInfo.astro';
import LastUpdated from './components/LastUpdated.astro';

const {
  locale,
  pathname, // TODO:

  title,
  metaTitle,
  headline,
  metaDescription,
  cover,
  noindex,
  breadcrumbs,
  datePublished,
  dateModified,
  readingTime,
  html,
  authors,
} = Astro.props.post;

/*
recentPosts: allMdPost(sort: { fields: [datePublished], order: DESC }, limit: 10, filter: { locale: { eq: $locale } }) {
featuredPosts: allMdPost(
  sort: { fields: [datePublished], order: DESC }
  limit: 10
  filter: { featured: { eq: true }, locale: { eq: $locale } }
*/
// {cover && cover.sm ? <img src={Astro.resolve(cover.sm)} alt={cover.alt} /> :  null}

/* <AsideServices mainNav={mainNav} /> */
const translations = fetchTranslations(locale);
const t = (key, params = undefined) => translate(key, translations, params);
---

<Layout
  {title}
  {headline}
  {breadcrumbs}
  seo={{
    locale,
    title: metaTitle || title,
    description: metaDescription || headline,
    headline,
    pathname,
    noindex,
    breadcrumbs,
    datePublished,
    dateModified,
    authors,
    pageType: 'BlogPosting',
    imgPath: cover?.sm?.publicURL,
  }}
>
  <PostInfo {authors} {datePublished} {readingTime} {t} />
  <InnerAsideLayout {cover} {html}>
    <aside slot="aside" class="flex flex-col">
      <AsideRecentPosts {t} />
      <AsideFeaturedPosts {t} />
    </aside>
  </InnerAsideLayout>
  {dateModified && ((datePublished && dateModified !== datePublished) || !datePublished) ? <LastUpdated date={dateModified} t={t} /> : null}
</Layout>
