---
import config from '@/config/website';
import getLocaleFromUrlPathname from '@/helpers/getLocaleFromUrlPathname';
import { fetchPageBySlug } from '@/api/pages';
import { fetchTranslations } from '@/api/yamls';

import translate from '@/lib/translate';

import Layout from '@/components/Layout/Layout.astro';

import PostCard from './PostCard.astro';
import PostPagination from './PostPagination.astro';

// import { CategoryWidget, TagsWidget, YearsWidget } from '@/components/post-widgets';

export interface Props {
  title?: string;
  readMoreKey?: string;
  breadcrumbsItems?: string[] | string;
  indexPageSlug: string;
  page: {
    data: Array<Post>;
    currentPage: number;
    total: number;
    url: {
      prev?: string;
      next?: string;
      current: string;
    };
  };
}

const {
  title: optionalTitle,
  readMoreKey,
  breadcrumbsItems,
  indexPageSlug = 'blog',
  page: { data: posts, currentPage, total, url },
} = Astro.props as Props;

const locale = getLocaleFromUrlPathname(Astro.request.url.pathname);
const indexPage = await fetchPageBySlug(indexPageSlug, locale);
const { html, title: defaultTitle, metaTitle, headline, metaDescription, noindex, nofollow } = indexPage as Page;

const siteUrl = Astro.site.href; //Astro.site.origin - without trailing slash

const translations = fetchTranslations(locale);
const t: ITranslationFunc = function (key: string, params?: Record<string, string>): string {
  return translate(key, translations, params);
};

const readMore = t(readMoreKey || config.readMore);

const isFirst = currentPage === 1;

const link = [];
if (total > 1) {
  if (url.prev) {
    link.push({ rel: 'prev', href: `${siteUrl}${url.prev}` });
  }
  if (url.next) {
    link.push({ rel: 'next', href: `${siteUrl}${url.next}` });
  }
}

let title: string;
if (optionalTitle) {
  title = `${defaultTitle} ${optionalTitle}`;
} else {
  title = defaultTitle;
}
title = title.trim();

const breadcrumbs = {
  items: breadcrumbsItems,
  tailTitle: title,
};

const seo = {
  title: metaTitle,
  description: metaDescription,
  headline,
  noindex,
  nofollow,

  pageType: 'Blog',
  link,
};
---

<Layout {seo} {title} {headline} {breadcrumbs}>
  {isFirst && html && <div class="mt-6 mb-10" set:html={html} />}

  <div class="grid gap-7 lg:grid-cols-2 lg:grid-cols-3">
    {posts.map((post: Post) => <PostCard post={post} {readMore} />)}
  </div>
  <PostPagination currentPage={currentPage} total={total} url={url} />
</Layout>
