---
import getLocaleFromUrlPathname from '@/helpers/getLocaleFromUrlPathname';
import { getPostFromContent } from '@/cms/post';
import translate from '@/lib/translate';
import { fetchTranslations } from '@/api/yamls';
import { fetchBlogIndex } from '@/api/pages';
import Layout from '@/components/Layout/Layout.astro';

import InnerAsideLayout from '@/components/InnerAsideLayout.astro';
// import AsideServices from '../../service/components/AsideServices.astro';
import AsideFeaturedPosts from './components/AsideFeaturedPosts.astro';
import AsideRecentPosts from './components/AsideRecentPosts.astro';
import PostInfo from './components/PostInfo.astro';
import LastUpdated from './components/LastUpdated.astro';

const locale = getLocaleFromUrlPathname(Astro.request.url.pathname);
const { title, metaTitle, headline, metaDescription, cover, noindex, nofollow, datePublished, dateModified, readingTime, html, authors } =
  getPostFromContent(Astro.props.content, Astro.request.canonicalURL.pathname, locale);

/* <AsideServices mainNav={mainNav} /> */
const translations = fetchTranslations(locale);
const t: ITranslationFunc = function (key: string, params?: Record<string, string>): string {
  return translate(key, translations, params);
};

const breadcrumbs = {
  items: ['blog-index'],
  tailTitle: title,
};

const seo = {
  title: metaTitle,
  description: metaDescription,
  headline,
  datePublished,
  dateModified,
  authors,

  noindex,
  nofollow,

  pageType: 'BlogPosting',
  cover, // TODO:
};
---

<Layout {seo} {title} {headline} {breadcrumbs}>
  <PostInfo {authors} {datePublished} {readingTime} {t} />
  <InnerAsideLayout {cover} {html}>
    <aside slot="aside" class="flex flex-col">
      <AsideFeaturedPosts {t} />
      <AsideRecentPosts {t} />
    </aside>
  </InnerAsideLayout>
  {dateModified && ((datePublished && dateModified !== datePublished) || !datePublished) ? (
    <LastUpdated dateModified={dateModified} t={t} />
  ) : null}
</Layout>
